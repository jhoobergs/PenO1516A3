package be.cwa3.nightgame.Utils;

import android.util.Log;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by jesse on 12/12/2015.
 */
public class SoundHelper {

    public static String getBestAnswer(List<Double> toRecognize){
        List<Double> toRecognizeComparable = getComparableList(toRecognize);
        double bestWeightedProduct=0;
        String bestAnswer= "";
        for (Map.Entry<String, List<Double>> entry : soundSamples.entrySet()) {
            double weightedProduct = getWeightedProduct(toRecognizeComparable, entry.getValue());
            if(bestAnswer.equals("") || weightedProduct < bestWeightedProduct){
                Log.d("sound", String.valueOf(weightedProduct));
                bestWeightedProduct = weightedProduct;
                bestAnswer = entry.getKey();
            }
        }
        return bestAnswer;
    }

    public static List<String> getAnswerList(List<Double> toRecognize){
        List<Double> toRecognizeComparable = getComparableList(toRecognize);
        List<String> answerList = new ArrayList<>();
        String bestAnswer= "";
        double times= 1;
        double sum = 0;
        List<Double> weightedProducts = new ArrayList<>();
        List<String> names= new ArrayList<>();
        for (Map.Entry<String, List<Double>> entry : soundSamples.entrySet()) {
            double weightedProduct = getWeightedProduct(toRecognizeComparable, entry.getValue());
            if(weightedProducts.size()!=0) {
                times *= weightedProducts.get(weightedProducts.size()-1) / weightedProduct;
            }
            sum += times;
            weightedProducts.add(weightedProduct);
            names.add(entry.getKey());
        }
        double previouspercent = 0;
        for (int i =0; i<weightedProducts.size(); i++) {
            double percent;
            if(i==0) {
                percent = 100 / sum;
            }
            else{
                percent = weightedProducts.get(i-1) / weightedProducts.get(i) * previouspercent;
            }
            answerList.add(String.format("%f %s", percent, names.get(i)));
            Log.d("sound", String.valueOf(percent));
            previouspercent = percent;
        }
        Collections.sort(answerList);
        return answerList;
    }

    private static double getWeightedProduct(List<Double> toRecognize, List<Double> sample){
        double sum = 0;
        for(int i=1; i < toRecognize.size(); i++){
            if(sample.get(i)==0) {
                sum += Math.pow((toRecognize.get(i) - sample.get(i)),2);
            }
            sum += Math.pow((toRecognize.get(i) - sample.get(i)),2) / (toRecognize.get(i)/1000); //* sample.get(i)
        }

        return Math.sqrt(sum);
    }

    private static List<Double> getComparableList(List<Double> sample){
        List<Double> newList= new ArrayList<>();
        double sum = 0;
        for(int i=1; i<sample.size(); i++){
            sum += sample.get(i);
        }
        for(double item: sample){
            if(sum != 0)
                newList.add(item/sum);
            else
                newList.add(0.0);
        }
        return newList;
    }
    /*private static List<Double> listStilte = Arrays.asList(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
    private static List<Double> listTest1 = Arrays.asList(0.0,0.04579379139209968,0.0392988855974842,0.021805050536737678,0.08907931906449218,0.022464615369301964,0.0054439018468387486,0.0019516149058975405,0.07295172383729537,0.29781204264706834,0.02051973156984851,0.039007343489030386,0.018688785570868692,0.002136088545208144,0.021713068415802828,0.009423562217074412,0.008688540075695228,0.017593018752176084,0.009833234219208382,0.0011409431156748067,0.0071831941047615045,0.012279826994677749,0.010628571162900093,0.0010438848127767482,0.0035754401210709966,0.0013647678562752064,0.005362701777826181,0.010940072082277073,0.0008258732359755437,0.000468978650979669,0.026296276075053897,0.018910594231552284,0.013628429009231722,0.02658200019560039,0.018597309867778557,0.023975372542319635,0.002618547371784473,0.041885139367903286,0.01642900414075315,0.012058755230698822);
    private static List<Double> listTest2 = Arrays.asList(0.0,0.05273846059324176,0.10051470021671727,0.061057542867318654,0.018004883368336885,0.0007828477082209421,0.004306523160893699,0.024790973231067145,0.008012526915257898,0.05680921778261128,0.0978056900564379,0.14965068974287826,0.021799352031852817,0.014155128012102707,0.020409923099248998,0.0036914113596241034,0.0028757203195999177,0.004410208769189936,0.0004889067500693045,0.014563273575942733,0.000041401918974490017,0.010595286911949992,0.012510915742081977,0.00008800108774492015,0.00022441661027953227,0.009692023747580051,0.0015475240024346868,0.00954321243535794,0.01133056176711182,0.0055154698897847175,0.021240282203074303,0.03056353472594212,0.061150633258591006,0.024231985850251447,0.05395395622300519,0.0009161130372449413,0.019531340539846682,0.029770298023836333,0.01385062597231079,0.026834436491984998);
    private static List<Double> listTest3 = Arrays.asList(0.0,0.004933250413343956,0.09982179964295247,0.003622738824202749,0.09377576946995834,0.1860995503614661,0.00956053318966734,0.0726376035026187,0.20291172142466213,0.04382908892083313,0.03898564766160713,0.028884373620869784,0.01040093120968509,0.03168011251173437,0.00364123036013922,0.017110183663242313,0.02036818626570313,0.008805415782524766,0.011866977177934576,0.016166954774289123,0.02224533251804962,0.006385830363140251,0.02347948851024401,0.008252636414273143,0.0015266877324776763,0.0024384671111210214,0.006357742046888991,0.001996132146834203,0.0001279010878629746,0.003962506627712256,0.003447946077537199,0.0012306681112479283,0.0003958092810662484,0.002497189702327554,0.0006311594749044081,0.002358465892752587,0.00236842016742933,0.0014899614729698785,0.0019017544585021515,0.0018038320252239948);
    private static List<Double> listHallo1 = Arrays.asList(0.0,0.07395210143806473,0.1436904096207644,0.19742917735434137,0.04604561231542381,0.054616184364350395,0.1368302046071537,0.02366647139791939,0.014654743663058021,0.04511912810610855,0.00024947822355164635,0.006086344762284407,0.015813601508491305,0.019453461816445403,0.008512189771324272,0.02894393717371805,0.0020611618586686155,0.02969978486649164,0.011907192018324627,0.05041467729349832,0.009466402210392612,0.01016935959183738,0.001330767643227175,0.011170527331957785,0.011969903964513494,0.00723102646894861,0.0011505781142114482,0.004351592857734898,0.002422083238813663,0.0032858372947309374,0.008007204762202194,0.0008228912029367109,0.0022665002877001665,0.0027367959972759816,0.005554365233731837,0.0010924693582851656,0.0005381410491467693,0.0004603717524979201,0.0020530270786570976,0.004774292401215409);
    private static List<Double> listHallo2 = Arrays.asList(0.0,0.011966269948944659,0.08861656408177802,0.12926526191635115,0.01220712565237473,0.014379845304760752,0.20763692598771907,0.024416701469608615,0.3111245490006444,0.01200813875014628,0.013581156600158024,0.017160008723740062,0.005438364323047438,0.002758130953476517,0.008504136746345755,0.061615478326749955,0.012622126849128513,0.027049324634985352,0.0007751127292044805,0.0002796338274889381,0.006712650943283362,0.00026697664838539256,0.0008783018985473861,0.0010345127972865413,0.004240430769131708,0.00799640663669615,0.00274377134614607,0.00041050057211265055,0.0015387965561632772,0.0006709330313340616,0.00016336424414928045,0.00213721170727521,0.003538053458413799,0.0008655848820986221,0.000871637246955648,0.0009147113578686062,0.0003079389173875753,0.00011973742808795862,0.0019470585066933075,0.0012365652253304737);
    private static List<Double> listHallo3 = Arrays.asList(0.0,0.056664726361609866,0.02822114795219353,0.057235566621575584,0.008770844290079793,0.16446663069118206,0.11764261709589575,0.05091082823787014,0.09112637457178514,0.000740358756737427,0.047269161771068366,0.05264734558938149,0.020962560181924297,0.07176123924216052,0.003861699104247453,0.0776674513813032,0.0025346073116469347,0.04440427969599457,0.004653057316008659,0.03051747379834971,0.0019053782780789133,0.02099838989910253,0.005299767785725954,0.0036647271995342385,0.005961457320405833,0.005710927096423511,0.0046420247289356694,0.0011168003303668747,0.00008386346497595396,0.0034783849937219348,0.0021995539086080806,0.002701582889237714,0.0024070183264069144,0.0002575841330099788,0.00006358717269294184,0.001812514197817069,0.0005740300286638471,0.0006602282506610704,0.0007341094183012638,0.0036701006063154934);
    private static List<Double> listHallo4 = Arrays.asList(0.0,0.014142934265954985,0.1807091631112789,0.04324495339174179,0.08790529105424993,0.03751333975617187,0.36289248580298356,0.0012281938081396841,0.059670076378033704,0.015344864511117785,0.002474243672412247,0.03192455483925175,0.00574927361529638,0.06859986115088015,0.01640596916201679,0.00373531189499473,0.018067702776257105,0.00852955332835381,0.00836586730898183,0.00435887365882671,0.002023115322477985,0.0029664575056530702,0.003168180492201496,0.0029718036471013667,0.003151177717708232,0.0026937236747764013,0.00019790428334805557,0.00009043745324994418,0.002192160216815003,0.00016288785525810938,0.0015328045245987095,0.0003273226426094864,0.0001911353800279149,0.0019267473989952688,0.0005373388284804709,0.0011241541001761816,0.0004930550445941489,0.0016206704313013005,0.0006422512955053903,0.001124158698178076);
    private static List<Double> listHallo5 = Arrays.asList(0.0,0.02874934296641735,0.12719185117075543,0.1260212836624201,0.06338691253575962,0.1035457525401947,0.04719535244229697,0.2606409625453144,0.053320615958133595,0.0530922015503453,0.0021630656204543568,0.03284338661500746,0.01656433261409442,0.020781745840969777,0.014308701651413012,0.0036100068163165966,0.00007193932451704708,0.013292045060894448,0.000822661446532874,0.009158141889629568,0.0008103289731363825,0.0008529416805065188,0.001305847299209706,0.0016579525353288404,0.0009134131413929567,0.002130018355445032,0.0015752418793780032,0.0003935946839387181,0.0017445442961069538,0.0015082474196334984,0.0006464430230501322,0.0010333996015070963,0.000022687349109079656,0.00011906809393637573,0.0035884638255866057,0.0011946239217775758,0.0008758530032529742,0.0012946001383771111,0.0006470409063369333,0.0009253876215226272);
    private static List<Double> listMaan1 = Arrays.asList(0.0,0.03865020972972519,0.04569149655205809,0.03729348303462283,0.028354922100362775,0.008144246437953143,0.04077324441427763,0.008894905987761641,0.042556757455805325,0.019666453807126137,0.030668395743758847,0.0016079399656830987,0.030885324846828155,0.04833277426936714,0.06470961219436691,0.031374980426102324,0.05706890685151445,0.02352432384298682,0.017644181639218343,0.029945464331166297,0.03322906105977558,0.01814106617526046,0.003718296961617734,0.023068137638741798,0.006849498039615521,0.007076208271787585,0.01988489428397124,0.02580661296252279,0.0068219604472020585,0.029241388092298874,0.002026904809258668,0.05316822698552803,0.0320770462578586,0.0002660769443284894,0.016249094861107923,0.04978144457751818,0.017355433952312413,0.012191212650606253,0.025322611629346868,0.01193719976865593);
    private static List<Double> listMaan2 = Arrays.asList(0.0,0.05489695166163791,0.0328498056095857,0.4054460598262342,0.017755052522196783,0.038027194800427835,0.046277202943953856,0.0060504467031130904,0.025157525309171057,0.021515419728566562,0.009425554429274443,0.0014977776562248425,0.00809758216085321,0.007422589577883809,0.011442557910440505,0.003675179036495311,0.05173082779771729,0.0064522040448786195,0.017537137801641418,0.02394809456436823,0.012971195976314817,0.0008585394743114234,0.008059611236717983,0.0011286222612553252,0.011237171955020909,0.01450393053626838,0.03593231968125069,0.009618684396571882,0.0025623978047995513,0.005664434772806082,0.008035789345896717,0.034249308864168035,0.0008103212556125933,0.009062829791334014,0.00420890240022754,0.004474800464486097,0.0011713314363495761,0.008366524024474223,0.012171866238264535,0.02570625399920473);
    */
    private static List<Double> listMaan = Arrays.asList(0.0,0.037936917168332446,0.1509542432098174,0.09566332971586619,0.051494560837156214,0.0410941689984631,0.016686467145332375,0.02924952141289584,0.024905727120091824,0.011067435867338013,0.006773699187288373,0.027283634361883448,0.025202032982896343,0.007848126440565756,0.02206162235423779,0.01812321211124681,0.012807405881831019,0.02636613150093925,0.015197828763144633,0.020615081856084745,0.011442399879711102,0.010099257215283791,0.010344759092508617,0.010370235773670458,0.002521984118229217,0.01912051922287193,0.018638742282776944,0.01751175590578344,0.018945389821946025,0.03358044833402886,0.03150842170263434,0.026841707856413693,0.026169812164788107,0.03394085558657691,0.029968944603061532,0.02755819036896709,0.009252694334827916,0.006912442083506445,0.006576202420493579,0.007364090316508391);
    private static List<Double> listRoos = Arrays.asList(0.0,0.06900740432477034,0.23064515256407336,0.024466649355689072,0.09701065725332352,0.02929121240063543,0.031317523641502004,0.05013513437520693,0.06285537688595752,0.14586535471203635,0.07602426248854996,0.015192151578177018,0.00817144353400126,0.028826677948374214,0.02826434416600144,0.014405025302849104,0.0042686287647218,0.016437233015367068,0.011728666101037837,0.006766056887492012,0.009808079345131223,0.0022628420757893346,0.001768702455549022,0.004204777565733484,0.0026687061442248485,0.0015853185328187432,0.0035981826391595535,0.002270911225041767,0.0011711582893282715,0.0014560246072837907,0.0017526280152410467,0.0016409277346193663,0.0013229263828437774,0.000887176358214136,0.0028563584172960335,0.001713810408708429,0.0028534748827154953,0.0022157216360975357,0.0020517562104582056,0.0012315617739795278);
    private static List<Double> listVis = Arrays.asList(0.0,0.032444501400294916,0.2785182476208289,0.016190229886643096,0.09075746057681437,0.014705193020743978,0.011525112817726285,0.23985477979286302,0.030672975142690583,0.05012887952199454,0.008066005854306767,0.004529835580533903,0.003708265639247515,0.007582769005095111,0.004303382798271145,0.004773927391384913,0.001314456744061624,0.0029866749041179033,0.005214577862985545,0.003061255511555551,0.00429280874485502,0.0017076561870687061,0.002664741876736514,0.0017379160841814122,0.0013754279211523391,0.0030605817104679732,0.0030632976039835502,0.0015244188322011598,0.004780834746614638,0.006631590331596373,0.004577763838682325,0.00429691915762907,0.0065809173290203886,0.008067230343741445,0.026113213476491242,0.023253411495787586,0.030499050999640547,0.029511808736722035,0.017786501085779022,0.008135378425488952);
    public static final Map<String, List<Double>> soundSamples;
    static
    {
        soundSamples = new HashMap<String, List<Double>>();
        //soundSamples.put("(Stil)", listStilte);
        /*soundSamples.put("Test1", listTest1);
        soundSamples.put("Test2", listTest2);
        soundSamples.put("Test3", listTest3);
        soundSamples.put("Hallo1", listHallo1);
        soundSamples.put("Hallo2", listHallo2);
        soundSamples.put("Hallo3", listHallo3);
        soundSamples.put("Hallo4", listHallo4);
        soundSamples.put("Hallo5", listHallo5);
        soundSamples.put("Maan1", listMaan1);
        soundSamples.put("Maan2", listMaan2);*/
        soundSamples.put("Maan", listMaan);
        soundSamples.put("Roos", listRoos);
        soundSamples.put("Vis", listVis);
    };

}
